//#include<unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <stdint.h>
#include <signal.h>
#include <math.h>

#include "fft_sea.h"
#include "time_cst.h"

static const int kHrmSmpNum = 2048; //sample data number for harmonic per 10 cycle(¡Ö0.2s)

int fft_tmp_[kHrmSmpNum] = {8405,7752,7792,8396,8573,7921,7529,7874,8321,7991,7416,7329,7693,7741,7327,6937,6931,7113,7037,6666,6288,6262,6407,6320,5837,5427,5494,5700,5434,4751,4496,4769,4848,4190,3605,3670,3959,3568,2862,2606,2839,2740,2158,1691,1685,1701,1345,882,658,583,368,53,-226,-465,-701,-887,-1067,-1389,-1741,-1915,-1967,-2237,-2672,-2930,-2935,-3088,-3509,-3847,-3892,-3962,-4308,-4661,-4755,-4806,-5095,-5417,-5508,-5551,-5829,-6139,-6196,-6183,-6448,-6794,-6851,-6739,-6930,-7314,-7441,-7261,-7313,-7663,-7885,-7726,-7652,-7879,-8127,-8062,-7950,-8030,-8194,-8199,-8143,-8149,-8170,-8138,-8150,-8194,-8121,-7950,-7946,-8076,-8028,-7716,-7584,-7744,-7807,-7447,-7147,-7225,-7381,-7088,-6678,-6602,-6753,-6569,-6151,-5943,-6000,-5873,-5507,-5243,-5201,-5055,-4718,-4457,-4374,-4183,-3824,-3557,-3477,-3285,-2890,-2573,-2482,-2330,-1946,-1574,-1420,-1291,-966,-598,-376,-198,88,385,598,858,1196,1435,1537,1806,2263,2554,2531,2662,3186,3650,3627,3523,3944,4580,4745,4476,4629,5272,5709,5494,5373,5793,6374,6420,6215,6305,6758,7073,7043,6930,7042,7398,7657,7625,7427,7516,7922,8190,7963,7645,7883,8423,8483,7914,7742,8271,8723,8256,7698,7892,8530,8444,7789,7530,7988,8273,7857,7330,7358,7722,7674,7222,6877,6974,7123,6985,6576,6274,6295,6430,6274,5739,5411,5550,5731,5289,4652,4517,4846,4723,4033,3549,3729,3901,3414,2740,2601,2840,2636,2023,1625,1702,1651,1243,795,648,552,308,-13,-273,-514,-745,-921,-1127,-1467,-1799,-1935,-2012,-2327,-2755,-2961,-2953,-3165,-3603,-3898,-3895,-4019,-4396,-4721,-4756,-4851,-5173,-5473,-5508,-5593,-5904,-6193,-6184,-6218,-6528,-6857,-6820,-6752,-7005,-7392,-7400,-7243,-7366,-7746,-7854,-7690,-7670,-7943,-8119,-8029,-7944,-8062,-8198,-8184,-8136,-8157,-8163,-8134,-8161,-8202,-8082,-7933,-7970,-8105,-7963,-7664,-7595,-7791,-7738,-7362,-7124,-7267,-7332,-6991,-6619,-6618,-6729,-6482,-6072,-5926,-5986,-5803,-5428,-5208,-5180,-4991,-4645,-4419,-4344,-4114,-3749,-3518,-3447,-3210,-2805,-2524,-2461,-2262,-1856,-1510,-1401,-1236,-885,-529,-344,-147,154,440,646,926,1262,1470,1582,1897,2355,2589,2541,2751,3313,3719,3590,3571,4081,4700,4682,4461,4730,5420,5671,5435,5401,5914,6398,6371,6185,6355,6834,7084,7012,6912,7114,7467,7682,7596,7431,7590,8014,8218,7883,7651,7993,8530,8364,7824,7792,8414,8644,8105,7645,7992,8541,8313,7658,7532,8071,8223,7723,7243,7442,7751,7606,7115,6891,7018,7132,6932,6505,6259,6328,6453,6166,5640,5396,5607,5658,5142,4554,4538,4847,4598,3876,3491,3787,3841,3259,2618,2661,2841,2532,1887,1640,1718,1600,1140,762,637,520,247,-65,-320,-564,-790,-957,-1189,-1545,-1859,-1942,-2057,-2416,-2839,-2954,-2973,-3242,-3699,-3896,-3898,-4075,-4485,-4729,-4758,-4895,-5251,-5481,-5508,-5635,-5981,-6193,-6172,-6252,-6609,-6855,-6789,-6765,-7082,-7403,-7359,-7226,-7419,-7780,-7824,-7653,-7689,-7988,-8111,-7996,-7938,-8094,-8203,-8170,-8130,-8159,-8155,-8131,-8173,-8182,-8044,-7917,-7994,-8086,-7897,-7613,-7607,-7794,-7669,-7278,-7101,-7295,-7283,-6895,-6559,-6651,-6704,-6396,-5993,-5944,-5971,-5734,-5350,-5206,-5160,-4927,-4573,-4408,-4313,-4044,-3674,-3508,-3418,-3136,-2719,-2513,-2439,-2195,-1765,-1487,-1382,-1182,-804,-491,-313,-95,220,480,694,995,1328,1487,1626,1987,2447,2575,2552,2841,3441,3697,3551,3620,4219,4711,4619,4445,4830,5492,5632,5375,5430,6029,6421,6323,6155,6456,6911,7094,6980,6945,7185,7537,7707,7555,7435,7663,8107,8155,7801,7658,8102,8519,8244,7733,7842,8491,8565,7955,7591,8127,8552,8183,7525,7646,8155,8174,7588,7272,7526,7779,7538,7056,6904,7061,7141,6844,6433,6245,6361,6409,6056,5541,5380,5638,5583,4996,4454,4615,4847,4472,3718,3551,3844,3782,3104,2615,2720,2842,2427,1822,1655,1735,1549,1055,727,626,488,183,-119,-368,-614,-822,-993,-1250,-1624,-1877,-1950,-2103,-2506,-2869,-2948,-2992,-3320,-3748,-3895,-3902,-4133,-4543,-4737,-4759,-4941,-5306,-5490,-5509,-5678,-6033,-6194,-6161,-6288,-6670,-6854,-6758,-6779,-7159,-7416,-7319,-7209,-7500,-7815,-7793,-7617,-7752,-8034,-8103,-7963,-7968,-8127,-8207,-8156,-8136,-8163,-8148,-8128,-8179,-8161,-8005,-7900,-8021,-8066,-7832,-7562,-7652,-7798,-7601,-7193,-7142,-7323,-7234,-6798,-6573,-6685,-6680,-6309,-5976,-5962,-5957,-5664,-5314,-5204,-5139,-4863,-4534,-4396,-4283,-3975,-3635,-3497,-3388,-3062,-2670,-2503,-2418,-2128,-1701,-1465,-1364,-1128,-735,-452,-281,-44,275,519,741,1063,1364,1504,1671,2078,2483,2561,2562,2930,3511,3674,3513,3668,4339,4723,4555,4429,4978,5565,5593,5315,5551,6144,6445,6273,6205,6557,6987,7104,6964,6977,7257,7606,7680,7512,7439,7736,8135,8091,7720,7664,8209,8507,8125,7642,7985,8569,8485,7804,7691,8261,8562,8052,7527,7760,8238,8124,7503,7301,7609,7808,7433,6997,6918,7104,7090,6755,6361,6229,6384,6364,5947,5441,5437,5669,5509,4849,4475,4692,4848,4346,3662,3610,3902,3722,2983,2610,2780,2843,2293,1757,1670,1751,1448,968,693,614,429,118,-172,-416,-657,-855,-1030,-1312,-1682,-1896,-1958,-2149,-2588,-2899,-2941,-3012,-3414,-3798,-3893,-3906,-4220,-4602,-4746,-4762,-5018,-5361,-5498,-5510,-5753,-6086,-6194,-6149,-6367,-6732,-6852,-6727,-6854,-7236,-7428,-7278,-7261,-7582,-7849,-7763,-7634,-7815,-8080,-8095,-7957,-7999,-8160,-8213,-8149,-8143,-8166,-8141,-8138,-8187,-8141,-7967,-7923,-8049,-8047,-7767,-7572,-7698,-7802,-7532,-7170,-7183,-7352,-7185,-6738,-6588,-6718,-6656,-6230,-5959,-5981,-5943,-5585,-5278,-5203,-5119,-4790,-4496,-4385,-4253,-3900,-3596,-3487,-3359,-2976,-2621,-2492,-2397,-2037,-1637,-1442,-1345,-1047,-666,-414,-250,22,330,559,789,1129,1399,1520,1715,2170,2518,2546,2572,3058,3580,3651,3474,3806,4460,4734,4491,4529,5125,5637,5553,5344,5672,6259,6468,6244,6255,6657,7063,7074,6947,7010,7328,7631,7652,7470,7443,7829,8163,8028,7638,7774,8316,8496,8004,7692,8128,8646,8405,7752,7792,8396,8573,7921,7529,7874,8321,7991,7416,7329,7693,7741,7327,6937,6931,7113,7037,6666,6288,6262,6407,6320,5837,5427,5494,5700,5434,4751,4496,4769,4848,4190,3605,3670,3959,3568,2862,2606,2839,2740,2158,1691,1685,1701,1345,882,658,583,368,53,-226,-465,-701,-887,-1067,-1389,-1741,-1915,-1967,-2237,-2672,-2930,-2935,-3088,-3509,-3847,-3892,-3962,-4308,-4661,-4755,-4806,-5095,-5417,-5508,-5551,-5829,-6139,-6196,-6183,-6448,-6794,-6851,-6739,-6930,-7314,-7441,-7261,-7313,-7663,-7885,-7726,-7652,-7879,-8127,-8062,-7950,-8030,-8194,-8199,-8143,-8149,-8170,-8138,-8150,-8194,-8121,-7950,-7946,-8076,-8028,-7716,-7584,-7744,-7807,-7447,-7147,-7225,-7381,-7088,-6678,-6602,-6753,-6569,-6151,-5943,-6000,-5873,-5506,-5243,-5201,-5055,-4718,-4457,-4374,-4183,-3824,-3557,-3477,-3285,-2890,-2573,-2482,-2330,-1946,-1574,-1420,-1291,-966,-598,-376,-198,88,385,598,858,1196,1435,1537,1806,2263,2554,2531,2662,3186,3650,3627,3523,3944,4580,4745,4476,4630,5273,5709,5494,5373,5793,6374,6420,6215,6305,6758,7073,7043,6930,7042,7398,7657,7625,7427,7516,7922,8190,7963,7645,7883,8423,8483,7914,7742,8271,8723,8256,7698,7892,8530,8444,7789,7530,7988,8273,7857,7330,7358,7722,7674,7222,6877,6974,7123,6985,6576,6274,6295,6430,6274,5739,5411,5550,5731,5289,4652,4517,4846,4723,4033,3549,3729,3901,3414,2740,2601,2840,2636,2023,1625,1702,1651,1243,795,648,552,308,-13,-273,-514,-745,-921,-1127,-1467,-1799,-1935,-2012,-2327,-2755,-2961,-2953,-3165,-3603,-3898,-3895,-4019,-4396,-4721,-4756,-4851,-5173,-5473,-5508,-5593,-5904,-6193,-6184,-6218,-6528,-6857,-6820,-6752,-7005,-7392,-7400,-7243,-7366,-7746,-7854,-7690,-7670,-7943,-8119,-8029,-7944,-8062,-8198,-8184,-8136,-8157,-8163,-8134,-8161,-8202,-8082,-7933,-7970,-8105,-7963,-7664,-7595,-7791,-7738,-7362,-7124,-7267,-7332,-6991,-6619,-6618,-6729,-6482,-6072,-5926,-5986,-5803,-5428,-5208,-5180,-4991,-4645,-4419,-4344,-4114,-3749,-3518,-3447,-3210,-2805,-2524,-2461,-2262,-1856,-1510,-1401,-1236,-885,-529,-344,-147,154,440,646,926,1262,1470,1582,1897,2355,2589,2541,2751,3313,3719,3590,3571,4081,4700,4682,4461,4730,5420,5671,5435,5401,5914,6398,6371,6185,6355,6834,7084,7012,6912,7114,7467,7682,7596,7431,7590,8014,8218,7883,7651,7993,8530,8364,7824,7792,8414,8644,8105,7645,7992,8541,8313,7658,7532,8071,8223,7723,7243,7442,7751,7606,7115,6891,7018,7132,6932,6505,6259,6328,6453,6166,5640,5396,5607,5658,5142,4554,4538,4847,4598,3876,3491,3787,3841,3259,2618,2661,2841,2532,1887,1640,1718,1600,1140,762,637,520,247,-65,-320,-564,-790,-957,-1189,-1545,-1859,-1942,-2057,-2416,-2839,-2954,-2973,-3242,-3699,-3896,-3898,-4075,-4485,-4729,-4758,-4895,-5251,-5481,-5508,-5635,-5981,-6193,-6172,-6252,-6609,-6855,-6789,-6765,-7082,-7403,-7359,-7226,-7419,-7780,-7824,-7653,-7689,-7988,-8111,-7996,-7938,-8094,-8203,-8170,-8130,-8159,-8155,-8131,-8173,-8182,-8044,-7917,-7994,-8086,-7897,-7613,-7607,-7794,-7669,-7278,-7101,-7295,-7283,-6895,-6559,-6651,-6704,-6396,-5993,-5944,-5971,-5734,-5349,-5206,-5160,-4927,-4573,-4408,-4313,-4044,-3674,-3508,-3418,-3136,-2719,-2513,-2439,-2195,-1765,-1487,-1382,-1182,-804,-491,-313,-95,220,480,694,995,1328,1487,1626,1987,2447,2575,2552,2841,3441,3697,3551,3620,4219,4711,4619,4445,4830,5492,5632,5375,5430,6029,6421,6323,6155,6456,6911,7094,6980,6945,7185,7537,7707,7555,7435,7663,8107,8155,7801,7658,8102,8519,8244,7733,7842,8491,8565,7955,7591,8127,8552,8183,7525,7646,8155,8174,7588,7272,7526,7779,7538,7056,6904,7061,7141,6844,6433,6245,6361,6409,6056,5541,5380,5638,5583,4996,4454,4615,4847,4472,3718,3551,3844,3782,3104,2615,2720,2842,2427,1822,1655,1735,1549,1055,727,626,488,183,-119,-368,-614,-822,-993,-1250,-1624,-1877,-1950,-2103,-2506,-2869,-2948,-2992,-3320,-3748,-3895,-3902,-4133,-4543,-4737,-4759,-4941,-5306,-5490,-5509,-5678,-6033,-6194,-6161,-6288,-6670,-6854,-6758,-6779,-7159,-7416,-7319,-7209,-7500,-7815,-7793,-7617,-7752,-8034,-8103,-7963,-7968,-8127,-8207,-8156,-8136,-8163,-8148,-8128,-8179,-8161,-8005,-7900,-8021,-8066,-7832,-7562,-7652,-7798,-7601,-7193,-7142,-7323,-7234,-6798,-6573,-6685,-6680,-6309,-5976,-5962,-5957,-5664,-5314,-5204,-5139,-4863,-4534,-4396,-4283,-3975,-3635,-3497,-3388,-3062,-2670,-2503,-2418,-2128,-1701,-1465,-1364,-1128,-735,-452,-281,-44,275,519,741,1063,1364,1504,1671,2078,2483,2561,2562,2930,3511,3674,3513,3668,4339,4723,4555,4429,4978,5565,5593,5315,5551,6144,6445,6273,6205,6557,6987,7104,6964,6977,7257,7606,7680,7512,7439,7736,8135,8091,7720,7664,8209,8507,8125,7642,7985,8569,8485,7804,7691,8261,8562,8052,7527,7760,8238,8124,7503,7301,7609,7808,7433,6997,6918,7104,7090,6755,6361,6229,6384,6364,5947,5441,5437,5669,5509,4849,4475,4692,4848,4346,3662,3610,3902,3722,2983,2610,2780,2843,2293,1757,1670,1751,1448,968,693,614,429,118,-172,-416,-657,-855,-1030,-1312,-1682,-1896,-1958,-2149,-2588,-2899,-2941,-3012,-3414,-3798,-3893,-3906,-4220,-4602,-4746,-4762,-5018,-5361,-5498,-5510,-5753,-6086,-6194,-6149,-6367,-6732,-6852,-6727,-6854,-7236,-7428,-7278,-7261,-7582,-7849,-7763,-7634,-7815,-8080,-8095,-7957,-7999,-8160,-8213,-8149,-8143,-8166,-8141,-8138,-8187,-8141,-7967,-7923,-8049,-8047,-7767,-7572,-7698,-7802,-7532,-7170,-7183,-7352,-7185,-6738,-6588,-6718,-6656,-6230,-5959,-5981,-5943,-5585,-5278,-5203,-5119,-4790,-4496,-4385,-4253,-3900,-3596,-3487,-3359,-2976,-2621,-2492,-2397,-2037,-1637,-1442,-1345,-1047,-666,-414,-250,22,330,559,789,1129,1399,1520,1715,2170,2518,2546,2572,3058,3580,3651,3474,3806,4460,4734,4491,4529,5125,5637,5553,5344,5672,6259,6468,6244,6255,6657,7063,7074,6947,7010,7328,7631,7652,7470,7443,7829,8163,8028,7638,7774,8316,8496,8004,7692,8128,8646};
;
int fft_tbuf_[4][3][kHrmSmpNum]; //fft data transmit buffer. [0-3]:channel; [0-2]:PhaseA-C;

/*!
Simulative harmonic data wave generator

    Input:  chl -- channel.0-3
            phs -- phase. 0-2:A-C
            amp -- amplitude
    Output: pbuf
*/
void HarmWaveGen(int *pbuf, int chl, int phs, double amp)
{
    float di;
    float pow_freq = 50;
    float smpfrq = 50*kHrmSmpNum/10.0;    //Sample frequency. unit:Hz

    int k = 3+chl*8+phs*2;
    for (int x=0; x<kHrmSmpNum; x++) {
        //di = amp*cos(2*kM_PI*pow_freq*x/smpfrq);
        //di += amp/50*cos(2*kM_PI*pow_freq*k*x/smpfrq);
        di = amp*cos(2*kM_PI*pow_freq*x/smpfrq - 2*kM_PI*phs/3);
        di += amp/20*cos(2*kM_PI*pow_freq*k*x/smpfrq + k*kM_PI/40.0);
        di += amp/20*cos(2*kM_PI*pow_freq*(k+1)*x/smpfrq + (k+1)*kM_PI/40.0);
        di += amp/20*cos(2*kM_PI*pow_freq*(k+2)*x/smpfrq + (k+1)*kM_PI/40.0);
        *pbuf = di + 0.5;
        pbuf++;
    }
}

CComplexNum tst_buf[4][3][kHrmSmpNum];
void CreateTestData()
{
    int i, j, k;
    float *pfi;
    for (i = 0; i < 4; i++) {
        for (j = 0; j < 3; j++) {
            HarmWaveGen(fft_tbuf_[i][j], i, j, 12345);
        }
    }
    memcpy(&fft_tbuf_[0][0][0], fft_tmp_, sizeof(fft_tmp_));
    memset(tst_buf, 0, sizeof(tst_buf));
    for (i = 0; i < 4; i++) {
        for (j = 0; j < 3; j++) {
            for (k=0; k<kHrmSmpNum; k++) {
                tst_buf[i][j][k].real = fft_tbuf_[i][j][k];
            }
        }
    }
    /*
    for (i=0; i<4; i++) {
        for (j=0; j<3; j++) {
            FFTBase2Test(tst_buf[i][j], kHrmSmpNum);
            pfi = (float *)tst_buf[i][j];
            for (k=0; k<kHrmSmpNum; k++) {
                fft_tbuf_[i][j][k] = pfi[k];
            }
        }
    }*/
}

void Test(int val)
{
    int i, j, k;
    CreateTestData();
   
    float avg=0, max=0, min=9999999999;
    int loops = 1;
    for (int m=0; m<loops; m++) {
        StopWatch (0, 1, NULL);
        for (int n=0; n<5; n++) {
            memset(tst_buf, 0, sizeof(tst_buf));
            for (i = 0; i < 4; i++) {
                for (j = 0; j < 3; j++) {
                    for (k=0; k<kHrmSmpNum; k++) {
                        tst_buf[i][j][k].real = fft_tbuf_[i][j][k]; //0;
                    }
                }
            }
            for (i=0; i<4; i++) {
                for (j=0; j<3; j++) {
                    FFTBase2(tst_buf[i][j], kHrmSmpNum, val);
                }
            }
        }
        StopWatch (0, 0, "fft");
        float dur = stopwatch_dur(0);
        if (dur>max) max = dur;
        if (dur<min) min = dur;
        avg += dur;
        msSleep(1000);
    }
    printf("avg=%6.3fs, max=%6.3fs, min=%6.3fs\n", avg/loops, max, min);
    
    float fr, fi;
        fr = tst_buf[0][0][20].real;
        fi = tst_buf[0][0][20].image;
        printf("%6.4f ", sqrt(fr*fr+fi*fi));
        fr = tst_buf[0][0][500].real;
        fi = tst_buf[0][0][500].image;
        printf("%6.4f ", sqrt(fr*fr+fi*fi));
        printf("\n");
}

int main (int argc, char *argv[])
{
    if (argc < 2) {
        printf("Usage: %s [0|1]\n", argv[0]);
        exit(1);
    }

    int num;
    sscanf(argv[1], "%d", &num);
    Test(num);

    return 0;
}



