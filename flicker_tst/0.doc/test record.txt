x86 精度测试
                1/2min  2/2min          7/2min          39/2min         110/2min        1620/min    4000/min  Maximum tolerance
normal:         0.99    1.005           0.991           1.021           1.01            0.988       1.019     0.033

dsp(1):         0.979   0.999           0.992           1.018           1.006           0.984       1.019
dsp(10):        9.636   9.873           9.867           10.16           10.046          9.832       9.955

   
dsp(1):         0.979   0.999           0.992           1.017-1.018     1.006           0.983       1.016
dsp(10):        9.628   9.869-9.875     9.863-9.867     10.152-10.157   10.047-10.048   9.83        9.933
FlickerStatis 用 uint32_t 或 float 没区别
double 全部改为 float, 精度居然还可以

快速排序算法性能测试
qsort(int)          avg=1.37854, max=0.14700, min=0.13378
QuickSort(int)      avg=0.66655, max=0.07108, min=0.06374
qsort(float)        avg=2.26990, max=0.23861, min=0.21817
QuickSort(float)    avg=2.65612, max=0.27312, min=0.25972
注1: 对于qsort(), 排序函数是否为 inline 对性能没任何影响.
注2: 实际数据测试结果为 qsort() 性能更好！！！

arm 精度测试
                1/2min  2/2min          7/2min          39/2min         110/2min        1620/min    4000/min  Maximum tolerance
方案1:(最高精度)
                0.973    0.996           0.992           1.018           1.006           0.984       1.020     0.047
                speed: 2.3828s/1min
方案2:(qsort(int)):
           1 :  0.973    0.996           0.992           1.018           1.006           0.984       1.020     0.047
           10:  9.558    9.844           9.868           10.16           10.048          9.832       10.119    0.602
                speed:  2.1399s/1min
方案3:(滤波中间变量类型改为 float)
                0.973~4  0.996           0.991~2         1.017~8         1.006           0.984       1.020     0.047
                speed: 2.3487s/1min
方案4:(所有滤波参数改为 float)
                1.00~1  1.013~29        1.003~9         1.029~32        1.023~4         0.995~6     1.013~4    0.037
                speed: 1.9272s/1min

优选方案: 2, 4. 

综合考量速度与精度因素，最终采用方案2 ！！！ 在 arm 上实现 pst 全部运算约需 2.1399s/60s = 3.57% CPU，保守估计不会超过4% 

方案2改进:(平方后平均值计算个数由120改为180):
           1 :  0.978    0.996           0.991           1.018           1.006           0.984       1.019     0.047
           10:  9.985    9.844           9.865           10.156          10.048          9.832       10.094    0.324
                speed:  2.231s/1min
在 arm 上实现 pst 全部运算约需 2.231s/60s = 3.72% CPU，保守估计不会超过4% 

计算速度与输入数值几乎没关系！